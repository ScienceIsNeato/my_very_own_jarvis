"""Session logging module for GANGLIA.

This module provides functionality to log and store conversation sessions,
both locally and in Google Cloud Storage. It includes classes for managing
session events, session data, and logging implementations.
"""

import json
import os
from pathlib import Path
import threading
import time
from abc import ABC, abstractmethod
from datetime import datetime
from typing import List
from uuid import uuid4


from logger import Logger
from utils import get_tempdir, upload_to_gcs

class SessionEvent:
    """Represents a single interaction event in a conversation session.
    
    Contains the user input, AI response, and timestamp of the interaction.
    """

    def __init__(self, user_input: str, response_output: str):
        """Initialize a new session event.
        
        Args:
            user_input: The input provided by the user
            response_output: The response generated by the AI
        """
        self.user_input = user_input
        self.response_output = response_output

        # Get the current time as a UNIX timestamp
        time_logged_unix = time.time()

        # Convert it to a datetime object
        dt_object = datetime.fromtimestamp(time_logged_unix)

        # Format it as an ISO 8601 string
        self.timestamp = dt_object.strftime("%Y-%m-%dT%H.%M.%S")

    def to_dict(self) -> dict:
        """Convert the session event to a dictionary.

        Returns:
            dict: Dictionary representation of the session event
        """
        return {
            "user_input": self.user_input,
            "response_output": self.response_output,
            "time_logged": self.timestamp
        }

class Session:
    """Represents a complete conversation session.
    
    Contains session metadata and a list of interaction events.
    """

    def __init__(self, session_id: str, timestamp: str, conversation: List[SessionEvent]):
        """Initialize a new session.
        
        Args:
            session_id: Unique identifier for the session
            timestamp: Session creation timestamp
            conversation: List of session events
        """
        self.session_id = session_id
        self.timestamp = timestamp
        self.conversation = conversation

    def to_dict(self) -> dict:
        """Convert the session to a dictionary.
        
        Returns:
            dict: Dictionary representation of the session
        """
        return {
            "sessionID": self.session_id,
            "timestamp": self.timestamp,
            "conversation": [event.to_dict() for event in self.conversation]
        }

class SessionLogger(ABC):
    """Abstract base class for session logging implementations."""

    @abstractmethod
    def log_session_interaction(self, session_event: SessionEvent) -> None:
        """Log a single session interaction.
        
        Args:
            session_event: The session event to log
        """
        pass

    @abstractmethod
    def finalize_session(self) -> None:
        """Finalize and clean up the session."""
        pass

class CLISessionLogger(SessionLogger):
    """Command-line interface session logger implementation.
    
    Handles logging session interactions to local files and Google Cloud Storage.
    """

    def __init__(self, options):
        """Initialize a new CLI session logger.
        
        Args:
            options: Configuration options for the logger
        """
        self.session_id = str(uuid4())
        self.timestamp = datetime.now().strftime("%Y-%m-%dT%H.%M.%S")
        self.file_name = os.path.join(get_tempdir(), f"GANGLIA_session_{self.timestamp}.json")
        self.conversation: List[SessionEvent] = []
        self.bucket_name = os.getenv('GCP_BUCKET_NAME')
        self.project_name = os.getenv('GCP_PROJECT_NAME')
        self.options = options

    def log_session_interaction(self, session_event: SessionEvent) -> None:
        """Log a session interaction.
        
        Args:
            session_event: The session event to log
        """
        self.conversation.append(session_event)
        self.write_to_disk()

        if self.options.store_logs:
            # Use a background thread to upload the log without blocking
            threading.Thread(target=self.store_in_cloud_background).start()

    def write_to_disk(self) -> None:
        """Write the current session to disk as JSON."""
        session = Session(self.session_id, self.timestamp, self.conversation)
        json_data = json.dumps(session.to_dict(), indent=2)

        file_path = Path(self.file_name)
        file_path.write_text(json_data, encoding='utf-8')

    def store_in_cloud_background(self) -> None:
        """Upload the session log to Google Cloud Storage."""
        success = upload_to_gcs(
            local_file_path=self.file_name,
            bucket_name=self.bucket_name,
            project_name=self.project_name
        )
        if not success:
            Logger.print_error("Failed to upload session log to cloud storage")

    def finalize_session(self) -> None:
        """Finalize the session and optionally upload to cloud storage."""
        self.write_to_disk()
        if self.options.store_logs:
            self.store_in_cloud_background()
            Logger.print_info(f"Session log saved as {self.file_name} and stored in {self.bucket_name}.")
        else:
            Logger.print_info(f"Session log saved as {self.file_name}.")
